kbConfig(title, tree, frameCSS = {});

ondrag(dragged, target):
if (!('seed' in target)) fail
if (dragged tree labels, types and structure doesn't match target.seed) fail
target.addChild(dragged, 0)

root can only have 'seed' and 'children' properties.
internal nodes can have 'label', 'value', 'validator' and 'children' properties.
internal nodes with internal node children can have the 'seed' property.

function getPerson(
    name = '*name*',
    occupation = '*occupation*',
    birthYear = 0,
    hairColour = '*colour*',
    eyeColour = '*colour*'
) {
    return {
        'label': 'Name',
        'value': name,
        'validator': (value) => value !== '',
        'children': [
            {
                'label': 'Occupation',
                'value': occupation,
                'validator': (value) => value !== '',
            },
            {
                'label': 'Birth Year (AD)',
                'value': birthYear,
                'validator': (value) => value >= 0,
            },
            {
                'label': 'Hair Colour',
                'value': hairColour,
                'validator': (value) => value !== '',
            },
            {
                'label': 'Eye Colour',
                'value': eyeColour,
                'validator': (value) => value !== '',
            },
        ]
    };
}

function getMedia(
    title = '*title*',
    type = '*type*',
    releaseYear = 0,
    description = '*description*'
) {
    return {
        'label': 'Title',
        'value': title,
        'validator': (value) => value !== '',
        'children': [
            {
                'label': 'type',
                'value': type,
                'validator': ['Movie', 'TV Show', 'Song', 'Album'],
            },
            {
                'label': 'Release Year (AD)',
                'value': releaseYear,
                'validator': (value) => value >= 0,
            },
            {
                'label': 'description',
                'value': '*colour*',
                'validator': (value) => value !== '',
            },
        ]
    };
}

tree = {
	'children': [
        {
            'label': 'Location',
            'value': 'The UK',
            'children': [
                {
                    'value': 'Famous People',
                    'seed': getPerson(),
                    'children': [
                        getPerson('William Shakespeare', 'Playwright', 1564, 'Brown?', 'Brown'),
                    ]
                },
                {
                    'value': 'Famous Media',
                    'seed': getMedia(),
                    'children': [
                        getMedia('Doctor Who', 'TV Show', 1963, 'A genderless, time-travelling alien struggles to cope with constantly saving the world, even on their days off.'),
                        getMedia('The Wicker Man', 'Movie', 1973, 'Cultists exact a contrived scheme to ritualistically sacrifice a policeman.'),
                        getMedia('How Soon Is Now?', 'Song', 1985, 'The Smiths\' manifestation of loneliness.'),
                    ]
                },
            ]
		},
    ],
	'seed': {
        'label': 'Location',
        'value': '*location*',
        'children': [
            {
                'value': 'Famous People',
                'validator': (value) => value !== '',
                'seed': getPerson(),
                'children': [getPerson()]
            },
            {
                'value': 'Famous Media',
                'validator': (value) => value !== '',
                'seed': getMedia(),
                'children': [getMedia()]
            }
        ],
	}
};

get rid of the No Empty Strings rule

get rid of that getParentalValidityArrays system.
ondragenter with file svg, create a new node from the entered node's seed and add it as a child.
if no seed, or if a child with seed's value already exists, handleEnter(event, false).

const DEFAULTS = {
	'label': 'Streamer',
	'value': '^',
	'sub': [
		{
			'label': 'Author',
			'value': '.^',
		},
		{
			'label': 'Message',
			'value': '[abcdefghijklmnopqrstuvxyz]|^$',
		},
		{
			'label': 'Require Badge',
			'value': true,
		},
		{
			'label': 'Queue Time',
			'value': 1000,
            'validator': (value) => value => 0
		},
		{
			'label': 'Stop on Hover',
			'value': true,
		},
	],
};

CHAT_FILTER_OPTIONS_TREE = {
	'sub': [
		// Nothing in this array can be deleted/re-ordered because parent doesn't have a 'seed' property
		{
			// Don't allow value-edits on nodes that lack a label property.
			// Error if these have a validator property, redundant.
			// Error on leaf nodes with no label property
			'value': 'Options',
			'sub': [
				{
					'label': 'Chat Height',
					'value': '2',
					'validator': (value) => value > 0
				},
				{
					'label': 'RegExp Flags',
					'value': 'i',
					'validator': (value) => {
					    const remainingFlags = 'dgimsuy'.split('');

					    for (const char of value) {
					        const flagIndex = remainingFlags.indexOf(char);

					        if (flagIndex === -1) {
					            return false;
                            }

                            remainingFlags.splice(flagIndex, 1);
					    }
					}
				}
			]
		},
		{
			'value': 'Defaults',
			'seed': DEFAULTS
			'sub': [DEFAULTS]
		},
	]
};
